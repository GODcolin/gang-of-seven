spring:
  application:
    name: SpringSecurityFramework
  datasource:
    driver-class-name:                         com.mysql.cj.jdbc.Driver
    url:                                       jdbc:mysql://106.14.22.220:3306/XXXX
    username:                                  root
    password:                                  XXXXXXXXXXXXXXXXXXXX
    type:                                      com.alibaba.druid.pool.DruidDataSource

    initialSize:                               5
    minIdle:                                   5
    maxActive:                                 20
    maxWait:                                   60000
    timeBetweenEvictionRunsMillis:             60000
    minEvictableIdleTimeMillis:                300000
    validationQuery:                           SELECT 1 FROM DUAL
    testWhileIdle:                             true
    testOnBorrow:                              false
    testOnReturn:                              false
    poolPreparedStatements:                    true

    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j
    filters:                                   stat,wall,log4j
    maxPoolPreparedStatementPerConnectionSize: 20
    useGlobalDataSourceStat:                   true
    connectionProperties:                      druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

  #邮件配置
  mail:
    host:             smtp.qq.com
    username:         XXXXXXXXXXXXX@qq.com
    password:         XXXXXXXXXXXXXXXXXX
    properties:
      mail:
        smtp:
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory
    ##         ssl:
    ##           enable :true
    default-encoding: utf-8

  redis:
    host:     101.43.204.78
    port:     6379
    password: XXXXXXXXXXXXX
    timeout:  3000
    database: 0
    lettuce:
      pool:
        max-active: 8
        max-wait:   -1
        max-idle:   8
        min-idle:   0


  servlet:
    multipart:
      enabled:          true
      #单个文件大小最大值限制
      max-file-size:    100MB
      #多个文件大小最大值限制
      max-request-size: 500MB

  #热部署
  devtools:
    restart:
      #热部署生效
      enabled:          true
      #设置重启的目录
      additional-paths: src/main/java

mybatis:
  # mybatis的 Mapping.xml的位置
  mapper-locations:     classpath:mapping/*Mapping.xml
  # 指定POJO扫描包来让mybatis自动扫描到自定义的POJO，如果配置了该配置则不需要再ResultMap中指定全类名了
  type-aliases-package: com.nyanner.govii.elementary.entity
  configuration:
    #一开始我的数据库的表属性是teacher_id,address_id
    #在Student类中定义的属性是teacherId,addressId结果就查询不出来
    #所以通过以下方式将其改为驼峰式名下划线去掉,后面的一个字母变为大写
    map-underscore-to-camel-case: true
    #打印sql
    log-impl:                     org.apache.ibatis.logging.stdout.StdOutImpl

######### 分页插件 ##########
pagehelper:
  #配置使用哪种数据库语言，不配置的话pageHelper也会自动检测
  helper-dialect:            mysql

  #为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值;
  # 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值，
  # 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。
  params:                    count = countSql

  #配置分页参数合理化功能，默认是false。 #启用合理化时，如果pageNum<1会查询第一页，如果pageNum>总页数会查询最后一页；
  #禁用合理化时，如果pageNum<1或pageNum>总页数会返回空数据。
  reasonable:                false

  #支持通过Mapper接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
  support-methods-arguments: true

govii:
  app:
    jwt-secret:        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    jwt-expiration-ms: 86400000
    captcha:
      timeout: 5

#七牛云配置参数
qiniu:
  accessKey:  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  secretKey:  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #空间名称
  bucketname: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #外链默认域名
  domain:     XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX















